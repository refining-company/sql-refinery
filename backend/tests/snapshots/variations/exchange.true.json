[
  { "data": {
      "id": 0,
      "jsonrpc": "2.0",
      "method": "initialize",
      "params": {
        "capabilities": {
          "general": {
            "markdown": {
              "parser": "marked",
              "version": "1.1.0" },
            "positionEncodings": [ "utf-16" ],
            "regularExpressions": {
              "engine": "ECMAScript",
              "version": "ES2020" },
            "staleRequestSupport": {
              "cancel": true,
              "retryOnContentModified": [
                "textDocument/semanticTokens/full",
                "textDocument/semanticTokens/full/delta",
                "textDocument/semanticTokens/range" ] } },
          "notebookDocument": {
            "synchronization": {
              "dynamicRegistration": true,
              "executionSummarySupport": true } },
          "textDocument": {
            "callHierarchy": { "dynamicRegistration": true },
            "codeAction": {
              "codeActionLiteralSupport": {
                "codeActionKind": {
                  "valueSet": [
                    "",
                    "quickfix",
                    "refactor",
                    "refactor.extract",
                    "refactor.inline",
                    "refactor.rewrite",
                    "source",
                    "source.organizeImports" ] } },
              "dataSupport": true,
              "disabledSupport": true,
              "dynamicRegistration": true,
              "honorsChangeAnnotations": true,
              "isPreferredSupport": true,
              "resolveSupport": {
                "properties": [ "edit" ] } },
            "codeLens": { "dynamicRegistration": true },
            "colorProvider": { "dynamicRegistration": true },
            "completion": {
              "completionItem": {
                "commitCharactersSupport": true,
                "deprecatedSupport": true,
                "documentationFormat": [ "markdown", "plaintext" ],
                "insertReplaceSupport": true,
                "insertTextModeSupport": {
                  "valueSet": [ 1, 2 ] },
                "labelDetailsSupport": true,
                "preselectSupport": true,
                "resolveSupport": {
                  "properties": [
                    "additionalTextEdits",
                    "detail",
                    "documentation" ] },
                "snippetSupport": true,
                "tagSupport": {
                  "valueSet": [ 1 ] } },
              "completionItemKind": {
                "valueSet": [ 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9 ] },
              "completionList": {
                "itemDefaults": [
                  "commitCharacters",
                  "data",
                  "editRange",
                  "insertTextFormat",
                  "insertTextMode" ] },
              "contextSupport": true,
              "dynamicRegistration": true,
              "insertTextMode": 2 },
            "declaration": {
              "dynamicRegistration": true,
              "linkSupport": true },
            "definition": {
              "dynamicRegistration": true,
              "linkSupport": true },
            "diagnostic": {
              "dynamicRegistration": true,
              "relatedDocumentSupport": false },
            "documentHighlight": { "dynamicRegistration": true },
            "documentLink": {
              "dynamicRegistration": true,
              "tooltipSupport": true },
            "documentSymbol": {
              "dynamicRegistration": true,
              "hierarchicalDocumentSymbolSupport": true,
              "labelSupport": true,
              "symbolKind": {
                "valueSet": [ 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 3, 4, 5, 6, 7, 8, 9 ] },
              "tagSupport": {
                "valueSet": [ 1 ] } },
            "foldingRange": {
              "dynamicRegistration": true,
              "foldingRange": { "collapsedText": false },
              "foldingRangeKind": {
                "valueSet": [ "comment", "imports", "region" ] },
              "lineFoldingOnly": true,
              "rangeLimit": 5000 },
            "formatting": { "dynamicRegistration": true },
            "hover": {
              "contentFormat": [ "markdown", "plaintext" ],
              "dynamicRegistration": true },
            "implementation": {
              "dynamicRegistration": true,
              "linkSupport": true },
            "inlayHint": {
              "dynamicRegistration": true,
              "resolveSupport": {
                "properties": [ "label.command", "label.location", "label.tooltip", "textEdits", "tooltip" ] } },
            "inlineValue": { "dynamicRegistration": true },
            "linkedEditingRange": { "dynamicRegistration": true },
            "onTypeFormatting": { "dynamicRegistration": true },
            "publishDiagnostics": {
              "codeDescriptionSupport": true,
              "dataSupport": true,
              "relatedInformation": true,
              "tagSupport": {
                "valueSet": [ 1, 2 ] },
              "versionSupport": false },
            "rangeFormatting": {
              "dynamicRegistration": true,
              "rangesSupport": true },
            "references": { "dynamicRegistration": true },
            "rename": {
              "dynamicRegistration": true,
              "honorsChangeAnnotations": true,
              "prepareSupport": true,
              "prepareSupportDefaultBehavior": 1 },
            "selectionRange": { "dynamicRegistration": true },
            "semanticTokens": {
              "augmentsSyntaxTokens": true,
              "dynamicRegistration": true,
              "formats": [ "relative" ],
              "multilineTokenSupport": false,
              "overlappingTokenSupport": false,
              "requests": {
                "full": { "delta": true },
                "range": true },
              "serverCancelSupport": true,
              "tokenModifiers": [
                "abstract",
                "async",
                "declaration",
                "defaultLibrary",
                "definition",
                "deprecated",
                "documentation",
                "modification",
                "readonly",
                "static" ],
              "tokenTypes": [
                "class",
                "comment",
                "decorator",
                "enum",
                "enumMember",
                "event",
                "function",
                "interface",
                "keyword",
                "macro",
                "method",
                "modifier",
                "namespace",
                "number",
                "operator",
                "parameter",
                "property",
                "regexp",
                "string",
                "struct",
                "type",
                "typeParameter",
                "variable" ] },
            "signatureHelp": {
              "contextSupport": true,
              "dynamicRegistration": true,
              "signatureInformation": {
                "activeParameterSupport": true,
                "documentationFormat": [ "markdown", "plaintext" ],
                "parameterInformation": { "labelOffsetSupport": true } } },
            "synchronization": {
              "didSave": true,
              "dynamicRegistration": true,
              "willSave": true,
              "willSaveWaitUntil": true },
            "typeDefinition": {
              "dynamicRegistration": true,
              "linkSupport": true },
            "typeHierarchy": { "dynamicRegistration": true } },
          "window": {
            "showDocument": { "support": true },
            "showMessage": {
              "messageActionItem": { "additionalPropertiesSupport": true } },
            "workDoneProgress": true },
          "workspace": {
            "applyEdit": true,
            "codeLens": { "refreshSupport": true },
            "configuration": true,
            "diagnostics": { "refreshSupport": true },
            "didChangeConfiguration": { "dynamicRegistration": true },
            "didChangeWatchedFiles": {
              "dynamicRegistration": true,
              "relativePatternSupport": true },
            "executeCommand": { "dynamicRegistration": true },
            "fileOperations": {
              "didCreate": true,
              "didDelete": true,
              "didRename": true,
              "dynamicRegistration": true,
              "willCreate": true,
              "willDelete": true,
              "willRename": true },
            "foldingRange": { "refreshSupport": true },
            "inlayHint": { "refreshSupport": true },
            "inlineValue": { "refreshSupport": true },
            "semanticTokens": { "refreshSupport": true },
            "symbol": {
              "dynamicRegistration": true,
              "resolveSupport": {
                "properties": [ "location.range" ] },
              "symbolKind": {
                "valueSet": [ 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 3, 4, 5, 6, 7, 8, 9 ] },
              "tagSupport": {
                "valueSet": [ 1 ] } },
            "workspaceEdit": {
              "changeAnnotationSupport": { "groupsOnLabel": true },
              "documentChanges": true,
              "failureHandling": "textOnlyTransactional",
              "normalizesLineEndings": true,
              "resourceOperations": [ "create", "delete", "rename" ] },
            "workspaceFolders": true } },
        "clientInfo": {
          "name": "Visual Studio Code",
          "version": "1.100.2" },
        "locale": "en",
        "processId": 77807,
        "rootPath": "codebase",
        "rootUri": "codebase",
        "trace": "off",
        "workspaceFolders": [
          { "name": "codebase",
            "uri": "codebase" } ] } },
    "direction": "client->server",
    "method": "initialize" },
  { "data": {
      "id": 5,
      "jsonrpc": "2.0",
      "method": "shutdown" },
    "direction": "client->server",
    "method": "shutdown" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "exit" },
    "direction": "client->server",
    "method": "exit" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "initialized",
      "params": {} },
    "direction": "client->server",
    "method": "initialized" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didClose",
      "params": {
        "textDocument": { "uri": "0-accounts.sql" } } },
    "direction": "client->server",
    "method": "textDocument/didClose" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didClose",
      "params": {
        "textDocument": { "uri": "1-revenue.sql" } } },
    "direction": "client->server",
    "method": "textDocument/didClose" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didClose",
      "params": {
        "textDocument": { "uri": "editor.sql" } } },
    "direction": "client->server",
    "method": "textDocument/didClose" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didOpen",
      "params": {
        "textDocument": {
          "languageId": "sql",
          "text": "-- CASE: Different groupings or thresholds applied to columns\n\nSELECT \n    date(date_month, 'start of year') AS date_year,\n    -- This should cause an error\n    CASE\n        WHEN c.region IN ('Americas') THEN 'AMER'\n        WHEN c.region IN ('Europe', 'Africa') THEN 'EMEA'\n        WHEN c.region = 'Asia' THEN 'APAC'\n        ELSE NULL\n    END AS macro_region,\n    -- This should case an error\n    IIF(a.industry = 'Information Technology', 'IT', 'Non-IT') AS industry_it,\n    SUM(ar.revenue) AS revenue,\n    COUNT(DISTINCT ar.account_id) AS accounts,\n    SUM(ar.revenue) / COUNT(DISTINCT ar.account_id) AS revenue_per_account\nFROM accounts_revenue ar\n    LEFT JOIN accounts a USING (account_id)\n    LEFT JOIN countries c USING (country)\nWHERE\n    -- This is appropriate, user can do ad-hoc filters for any subsets\n    a.industry IN ('Information Technology', 'Telecommunication Services')\n    -- This is appropriate, user can take any period\n    AND date_month BETWEEN DATE('now', '-24 months') AND DATE('now')\nGROUP BY date_year, macro_region, industry_it",
          "uri": "editor.sql",
          "version": 1 } } },
    "direction": "client->server",
    "method": "textDocument/didOpen" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didOpen",
      "params": {
        "textDocument": {
          "languageId": "sql",
          "text": "-- FOUNDATIONAL TABLES\n\n-- Calendar scaffolding: one day per row\n\nDROP TABLE IF EXISTS date_ranges;\nCREATE TABLE date_ranges AS\nWITH RECURSIVE date_ranges(date_day) AS (\n    SELECT \n        date(MIN(CASE WHEN d.stage_date < d.contract_start_date THEN d.stage_date ELSE d.contract_start_date END)) AS date_month\n    FROM deals d\n    UNION ALL\n    SELECT \n        date(date_day, '+1 day')\n    FROM date_ranges\n    WHERE date_day < (SELECT date(MAX(CASE WHEN d.contract_end_date > d.stage_date THEN d.contract_end_date ELSE d.stage_date END)) FROM deals d)\n)\nSELECT \n    date_day\nFROM date_ranges\nGROUP BY date_day;\n\n-- Currently active signed deals (stage=4) and daily revenue\n\nDROP TABLE IF EXISTS deals_signed;\nCREATE TABLE deals_signed AS\nSELECT \n    *,\n    revenue / contract_duration_days AS revenue_day,\n    revenue_core / contract_duration_days AS revenue_core_day,\n    revenue_aux / contract_duration_days AS revenue_aux_day\nFROM (\n    SELECT \n        d.deal_id,\n        d.account_id,\n        d.contract_start_date,\n        d.contract_end_date,\n        julianday(d.contract_end_date) - julianday(d.contract_start_date) + 1 AS contract_duration_days,\n        SUM(CASE WHEN o.product IN ('Subscription Base', 'Subscription Premium') THEN o.value ELSE 0 END) AS revenue_core,\n        SUM(CASE WHEN o.product IN ('Training', 'Consulting') THEN o.value ELSE 0 END) AS revenue_aux,\n        SUM(o.value) AS revenue\n    FROM orders o\n        JOIN deals d USING (deal_id, order_id)\n    WHERE d.stage = 4\n    GROUP BY d.deal_id, d.account_id, d.contract_start_date, d.contract_end_date\n) AS t;\n\n-- Revenue per account per month\n\nDROP TABLE IF EXISTS accounts_revenue;\nCREATE TABLE accounts_revenue AS\nSELECT \n    t.date_month,\n    t.account_id,\n    AVG(t.deals) AS deals,\n    SUM(t.revenue_core) AS revenue_core,\n    SUM(t.revenue_aux) AS revenue_aux,\n    SUM(t.revenue) AS revenue\nFROM (\n    SELECT \n        dr.date_day,\n        DATE(date_day, 'start of month') AS date_month,\n        ds.account_id,\n        COUNT(ds.deal_id) AS deals,\n        SUM(ds.revenue_core_day) AS revenue_core,\n        SUM(ds.revenue_aux_day) AS revenue_aux,\n        SUM(ds.revenue_day) AS revenue\n    FROM date_ranges dr\n        LEFT JOIN deals_signed ds \n            ON  dr.date_day >= date(ds.contract_start_date)\n            AND dr.date_day <= date(ds.contract_end_date)\n    GROUP BY dr.date_day, ds.account_id) t\nGROUP BY account_id, date_month;\n\n\n-- Key information by account as of now\n\nDROP TABLE IF EXISTS accounts_360;\nCREATE TABLE accounts_360 AS\nSELECT \n    t.*,\n    CASE \n        WHEN t.revenue_12m <= 300 THEN 'Small'\n        WHEN t.revenue_12m > 300 AND t.revenue_12m <= 600 THEN 'Medium'\n        WHEN t.revenue_12m > 600 THEN 'Large'\n        ELSE NULL\n    END AS account_size\nFROM (\n    SELECT \n        account_id,\n        date_month,\n        revenue,\n        revenue_core,\n        revenue_aux,\n        deals,\n        accounts.name,\n        accounts.industry,\n        accounts.country,\n        CASE\n            WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n            WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n            ELSE NULL\n        END AS region_cluster,\n        accounts.priority,\n        SUM(revenue) OVER (\n            PARTITION BY account_id \n            ORDER BY date_month \n            ROWS BETWEEN 11 PRECEDING AND CURRENT ROW\n        ) AS revenue_12m\n    FROM accounts_revenue\n        JOIN accounts USING (account_id)\n        LEFT JOIN countries c USING (country)\n) AS t;",
          "uri": "0-accounts.sql",
          "version": 1 } } },
    "direction": "client->server",
    "method": "textDocument/didOpen" },
  { "data": {
      "jsonrpc": "2.0",
      "method": "textDocument/didOpen",
      "params": {
        "textDocument": {
          "languageId": "sql",
          "text": "-- REVENUE REPORTS\n\n-- Revenue by region, cluster, account size\n\nSELECT \n    date(date_month, 'start of year') AS date_year,\n    CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END AS region_cluster,\n    CASE \n        WHEN a.industry = 'Information Technology' THEN 'Tech'\n        WHEN a.industry IS NULL THEN NULL\n        ELSE 'Other'\n    END AS industry_cluster,\n    a360.account_size,\n    SUM(ar.revenue) AS revenue,\n    COUNT(DISTINCT ar.account_id) AS accounts,\n    SUM(ar.revenue) / COUNT(DISTINCT ar.account_id) AS revenue_per_account\nFROM accounts_revenue ar\n    LEFT JOIN accounts a USING (account_id)\n    LEFT JOIN countries c USING (country)\n    LEFT JOIN accounts_360 a360 USING (account_id, date_month)\nGROUP BY date_year, region_cluster, industry_cluster, a360.account_size\nORDER BY date_year, region_cluster, industry_cluster;\n\n-- Accounts snapshot performance\n\nSELECT\n    accounts.name,\n    region,\n    CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END AS cluster,\n    accounts.industry AS industry,\n    IIF(accounts.industry = 'Information Technology', 'Tech', 'Other') AS industry_tech,\n    CASE \n        WHEN SUM(accounts_revenue.revenue) <= 300 THEN 'Small'\n        WHEN SUM(accounts_revenue.revenue) > 300 AND SUM(accounts_revenue.revenue) <= 600 THEN 'Medium'\n        WHEN SUM(accounts_revenue.revenue) > 600 THEN 'Large'\n        ELSE NULL\n    END AS account_size,\n    SUM(accounts_revenue.revenue) AS revenue_12m\nFROM accounts\n    LEFT JOIN accounts_revenue USING (account_id)\n    LEFT JOIN countries c USING (country)\nWHERE accounts_revenue.date_month BETWEEN DATE('now', '-12 months') AND DATE('now')\nGROUP BY accounts.name, region, accounts.industry;",
          "uri": "1-revenue.sql",
          "version": 1 } } },
    "direction": "client->server",
    "method": "textDocument/didOpen" },
  { "direction": "server->client",
    "method": "sql-refinery/variations",
    "params": {
      "uri": "0-accounts.sql",
      "variations": [
        { "others": [
            { "group": {
                "canonical": "Casewhen_expression(Casewhen_clause(In(?.countries.region, 'Americas'), 'AMER'), Casewhen_clause(In(?.countries.region, Struct('Europe', 'Africa')), 'EMEA'), Casewhen_clause(=(?.countries.region, 'Asia'), 'APAC'), Caseelse_clause(Null()))",
                "columns": [
                  { "column": "region",
                    "dataset": null,
                    "table": "countries" } ],
                "frequency": 1,
                "locations": [
                  { "file": "editor.sql",
                    "range": {
                      "end_char": 7,
                      "end_line": 10,
                      "start_char": 4,
                      "start_line": 5 } } ],
                "sql": "CASE\n        WHEN c.region IN ('Americas') THEN 'AMER'\n        WHEN c.region IN ('Europe', 'Africa') THEN 'EMEA'\n        WHEN c.region = 'Asia' THEN 'APAC'\n        ELSE NULL\n    END" },
              "similarity": 0.76 } ],
          "this": {
            "alias": "region_cluster",
            "columns": [
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 25,
                    "end_line": 98,
                    "start_char": 17,
                    "start_line": 98 } },
                "table": "c" },
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 25,
                    "end_line": 99,
                    "start_char": 17,
                    "start_line": 99 } },
                "table": "c" } ],
            "location": {
              "file": "0-accounts.sql",
              "range": {
                "end_char": 11,
                "end_line": 101,
                "start_char": 8,
                "start_line": 97 } },
            "sql": "CASE\n            WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n            WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n            ELSE NULL\n        END" } },
        { "others": [
            { "group": {
                "canonical": "Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Subscription Base', 'Subscription Premium')), ?.orders.value), Caseelse_clause(0))))",
                "columns": [
                  { "column": "product",
                    "dataset": null,
                    "table": "orders" },
                  { "column": "value",
                    "dataset": null,
                    "table": "orders" } ],
                "frequency": 1,
                "locations": [
                  { "file": "0-accounts.sql",
                    "range": {
                      "end_char": 105,
                      "end_line": 37,
                      "start_char": 8,
                      "start_line": 37 } } ],
                "sql": "SUM(CASE WHEN o.product IN ('Subscription Base', 'Subscription Premium') THEN o.value ELSE 0 END)" },
              "similarity": 0.89 } ],
          "this": {
            "alias": "revenue_aux",
            "columns": [
              { "column": "product",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 31,
                    "end_line": 38,
                    "start_char": 22,
                    "start_line": 38 } },
                "table": "o" },
              { "column": "value",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 74,
                    "end_line": 38,
                    "start_char": 67,
                    "start_line": 38 } },
                "table": "o" } ],
            "location": {
              "file": "0-accounts.sql",
              "range": {
                "end_char": 86,
                "end_line": 38,
                "start_char": 8,
                "start_line": 38 } },
            "sql": "SUM(CASE WHEN o.product IN ('Training', 'Consulting') THEN o.value ELSE 0 END)" } },
        { "others": [
            { "group": {
                "canonical": "Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Training', 'Consulting')), ?.orders.value), Caseelse_clause(0))))",
                "columns": [
                  { "column": "product",
                    "dataset": null,
                    "table": "orders" },
                  { "column": "value",
                    "dataset": null,
                    "table": "orders" } ],
                "frequency": 1,
                "locations": [
                  { "file": "0-accounts.sql",
                    "range": {
                      "end_char": 86,
                      "end_line": 38,
                      "start_char": 8,
                      "start_line": 38 } } ],
                "sql": "SUM(CASE WHEN o.product IN ('Training', 'Consulting') THEN o.value ELSE 0 END)" },
              "similarity": 0.89 } ],
          "this": {
            "alias": "revenue_core",
            "columns": [
              { "column": "product",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 31,
                    "end_line": 37,
                    "start_char": 22,
                    "start_line": 37 } },
                "table": "o" },
              { "column": "value",
                "dataset": null,
                "location": {
                  "file": "0-accounts.sql",
                  "range": {
                    "end_char": 93,
                    "end_line": 37,
                    "start_char": 86,
                    "start_line": 37 } },
                "table": "o" } ],
            "location": {
              "file": "0-accounts.sql",
              "range": {
                "end_char": 105,
                "end_line": 37,
                "start_char": 8,
                "start_line": 37 } },
            "sql": "SUM(CASE WHEN o.product IN ('Subscription Base', 'Subscription Premium') THEN o.value ELSE 0 END)" } } ] },
    "type": "notification" },
  { "direction": "server->client",
    "method": "sql-refinery/variations",
    "params": {
      "uri": "1-revenue.sql",
      "variations": [
        { "others": [
            { "group": {
                "canonical": "Casewhen_expression(Casewhen_clause(In(?.countries.region, 'Americas'), 'AMER'), Casewhen_clause(In(?.countries.region, Struct('Europe', 'Africa')), 'EMEA'), Casewhen_clause(=(?.countries.region, 'Asia'), 'APAC'), Caseelse_clause(Null()))",
                "columns": [
                  { "column": "region",
                    "dataset": null,
                    "table": "countries" } ],
                "frequency": 1,
                "locations": [
                  { "file": "editor.sql",
                    "range": {
                      "end_char": 7,
                      "end_line": 10,
                      "start_char": 4,
                      "start_line": 5 } } ],
                "sql": "CASE\n        WHEN c.region IN ('Americas') THEN 'AMER'\n        WHEN c.region IN ('Europe', 'Africa') THEN 'EMEA'\n        WHEN c.region = 'Asia' THEN 'APAC'\n        ELSE NULL\n    END" },
              "similarity": 0.76 } ],
          "this": {
            "alias": "cluster",
            "columns": [
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "1-revenue.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 33,
                    "start_char": 13,
                    "start_line": 33 } },
                "table": "c" },
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "1-revenue.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 34,
                    "start_char": 13,
                    "start_line": 34 } },
                "table": "c" } ],
            "location": {
              "file": "1-revenue.sql",
              "range": {
                "end_char": 7,
                "end_line": 36,
                "start_char": 4,
                "start_line": 32 } },
            "sql": "CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END" } },
        { "others": [
            { "group": {
                "canonical": "Casewhen_expression(Casewhen_clause(In(?.countries.region, 'Americas'), 'AMER'), Casewhen_clause(In(?.countries.region, Struct('Europe', 'Africa')), 'EMEA'), Casewhen_clause(=(?.countries.region, 'Asia'), 'APAC'), Caseelse_clause(Null()))",
                "columns": [
                  { "column": "region",
                    "dataset": null,
                    "table": "countries" } ],
                "frequency": 1,
                "locations": [
                  { "file": "editor.sql",
                    "range": {
                      "end_char": 7,
                      "end_line": 10,
                      "start_char": 4,
                      "start_line": 5 } } ],
                "sql": "CASE\n        WHEN c.region IN ('Americas') THEN 'AMER'\n        WHEN c.region IN ('Europe', 'Africa') THEN 'EMEA'\n        WHEN c.region = 'Asia' THEN 'APAC'\n        ELSE NULL\n    END" },
              "similarity": 0.76 } ],
          "this": {
            "alias": "region_cluster",
            "columns": [
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "1-revenue.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 7,
                    "start_char": 13,
                    "start_line": 7 } },
                "table": "c" },
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "1-revenue.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 8,
                    "start_char": 13,
                    "start_line": 8 } },
                "table": "c" } ],
            "location": {
              "file": "1-revenue.sql",
              "range": {
                "end_char": 7,
                "end_line": 10,
                "start_char": 4,
                "start_line": 6 } },
            "sql": "CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END" } },
        { "others": [
            { "group": {
                "canonical": "Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('IT'), Argument('Non-IT'))",
                "columns": [
                  { "column": "industry",
                    "dataset": null,
                    "table": "accounts" } ],
                "frequency": 1,
                "locations": [
                  { "file": "editor.sql",
                    "range": {
                      "end_char": 62,
                      "end_line": 12,
                      "start_char": 4,
                      "start_line": 12 } } ],
                "sql": "IIF(a.industry = 'Information Technology', 'IT', 'Non-IT')" },
              "similarity": 0.94 } ],
          "this": {
            "alias": "industry_tech",
            "columns": [
              { "column": "industry",
                "dataset": null,
                "location": {
                  "file": "1-revenue.sql",
                  "range": {
                    "end_char": 25,
                    "end_line": 38,
                    "start_char": 8,
                    "start_line": 38 } },
                "table": "accounts" } ],
            "location": {
              "file": "1-revenue.sql",
              "range": {
                "end_char": 70,
                "end_line": 38,
                "start_char": 4,
                "start_line": 38 } },
            "sql": "IIF(accounts.industry = 'Information Technology', 'Tech', 'Other')" } } ] },
    "type": "notification" },
  { "direction": "server->client",
    "method": "sql-refinery/variations",
    "params": {
      "uri": "editor.sql",
      "variations": [
        { "others": [
            { "group": {
                "canonical": "Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))",
                "columns": [
                  { "column": "region",
                    "dataset": null,
                    "table": "countries" } ],
                "frequency": 3,
                "locations": [
                  { "file": "0-accounts.sql",
                    "range": {
                      "end_char": 11,
                      "end_line": 101,
                      "start_char": 8,
                      "start_line": 97 } },
                  { "file": "1-revenue.sql",
                    "range": {
                      "end_char": 7,
                      "end_line": 10,
                      "start_char": 4,
                      "start_line": 6 } },
                  { "file": "1-revenue.sql",
                    "range": {
                      "end_char": 7,
                      "end_line": 36,
                      "start_char": 4,
                      "start_line": 32 } } ],
                "sql": "CASE\n            WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n            WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n            ELSE NULL\n        END" },
              "similarity": 0.76 } ],
          "this": {
            "alias": "macro_region",
            "columns": [
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "editor.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 6,
                    "start_char": 13,
                    "start_line": 6 } },
                "table": "c" },
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "editor.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 7,
                    "start_char": 13,
                    "start_line": 7 } },
                "table": "c" },
              { "column": "region",
                "dataset": null,
                "location": {
                  "file": "editor.sql",
                  "range": {
                    "end_char": 21,
                    "end_line": 8,
                    "start_char": 13,
                    "start_line": 8 } },
                "table": "c" } ],
            "location": {
              "file": "editor.sql",
              "range": {
                "end_char": 7,
                "end_line": 10,
                "start_char": 4,
                "start_line": 5 } },
            "sql": "CASE\n        WHEN c.region IN ('Americas') THEN 'AMER'\n        WHEN c.region IN ('Europe', 'Africa') THEN 'EMEA'\n        WHEN c.region = 'Asia' THEN 'APAC'\n        ELSE NULL\n    END" } },
        { "others": [
            { "group": {
                "canonical": "Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('Tech'), Argument('Other'))",
                "columns": [
                  { "column": "industry",
                    "dataset": null,
                    "table": "accounts" } ],
                "frequency": 1,
                "locations": [
                  { "file": "1-revenue.sql",
                    "range": {
                      "end_char": 70,
                      "end_line": 38,
                      "start_char": 4,
                      "start_line": 38 } } ],
                "sql": "IIF(accounts.industry = 'Information Technology', 'Tech', 'Other')" },
              "similarity": 0.94 } ],
          "this": {
            "alias": "industry_it",
            "columns": [
              { "column": "industry",
                "dataset": null,
                "location": {
                  "file": "editor.sql",
                  "range": {
                    "end_char": 18,
                    "end_line": 12,
                    "start_char": 8,
                    "start_line": 12 } },
                "table": "a" } ],
            "location": {
              "file": "editor.sql",
              "range": {
                "end_char": 62,
                "end_line": 12,
                "start_char": 4,
                "start_line": 12 } },
            "sql": "IIF(a.industry = 'Information Technology', 'IT', 'Non-IT')" } } ] },
    "type": "notification" } ]