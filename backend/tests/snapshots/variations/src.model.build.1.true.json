{
  "Semantics(columns=[model.Column(frequency=2), model.Column(frequency=3), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=2), model.Column(frequency=3), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=2), model.Column(frequency=1), model.Column(frequency=1), model.Column(frequency=4), model.Column(frequency=6), model.Column(frequency=1), model.Column(frequency=2), model.Column(frequency=3), model.Column(frequency=7), model.Column(frequency=2)], tables=[model.Table(frequency=1), model.Table(frequency=1), model.Table(frequency=1), model.Table(frequency=1), model.Table(frequency=3), model.Table(frequency=3), model.Table(frequency=3), model.Table(frequency=1)], expressions=[model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=3), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=2), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1), model.Expression(frequency=1)], expr_code_to_model={code.Expression(0-accounts.sql:27:4-27:36): model.Expression(frequency=1), code.Expression(0-accounts.sql:28:4-28:41): model.Expression(frequency=1), code.Expression(0-accounts.sql:29:4-29:40): model.Expression(frequency=1), code.Expression(0-accounts.sql:36:8-36:77): model.Expression(frequency=1), code.Expression(0-accounts.sql:37:8-37:105): model.Expression(frequency=1), code.Expression(0-accounts.sql:38:8-38:86): model.Expression(frequency=1), code.Expression(0-accounts.sql:39:8-39:20): model.Expression(frequency=1), code.Expression(0-accounts.sql:53:4-53:16): model.Expression(frequency=1), code.Expression(0-accounts.sql:54:4-54:23): model.Expression(frequency=1), code.Expression(0-accounts.sql:55:4-55:22): model.Expression(frequency=1), code.Expression(0-accounts.sql:56:4-56:18): model.Expression(frequency=1), code.Expression(0-accounts.sql:60:8-60:40): model.Expression(frequency=1), code.Expression(0-accounts.sql:62:8-62:25): model.Expression(frequency=1), code.Expression(0-accounts.sql:63:8-63:32): model.Expression(frequency=1), code.Expression(0-accounts.sql:64:8-64:31): model.Expression(frequency=1), code.Expression(0-accounts.sql:65:8-65:27): model.Expression(frequency=1), code.Expression(0-accounts.sql:68:16-69:57): model.Expression(frequency=1), code.Expression(0-accounts.sql:80:4-85:7): model.Expression(frequency=1), code.Expression(0-accounts.sql:97:8-101:11): model.Expression(frequency=3), code.Expression(1-revenue.sql:6:4-10:7): model.Expression(frequency=3), code.Expression(1-revenue.sql:32:4-36:7): model.Expression(frequency=3), code.Expression(0-accounts.sql:103:8-107:9): model.Expression(frequency=1), code.Expression(1-revenue.sql:5:4-5:37): model.Expression(frequency=1), code.Expression(1-revenue.sql:11:4-15:7): model.Expression(frequency=1), code.Expression(1-revenue.sql:17:4-17:19): model.Expression(frequency=2), code.Expression(1-revenue.sql:45:4-45:33): model.Expression(frequency=2), code.Expression(1-revenue.sql:18:4-18:33): model.Expression(frequency=1), code.Expression(1-revenue.sql:19:4-19:51): model.Expression(frequency=1), code.Expression(1-revenue.sql:38:4-38:70): model.Expression(frequency=1), code.Expression(1-revenue.sql:39:4-44:7): model.Expression(frequency=1)})": {
    "columns": [
      "model.Column(frequency=1) = ?.?.account_id",
      "model.Column(frequency=1) = ?.?.date_day",
      "model.Column(frequency=1) = ?.?.revenue_aux",
      "model.Column(frequency=1) = ?.?.revenue_core",
      "model.Column(frequency=1) = ?.deals.contract_end_date",
      "model.Column(frequency=1) = ?.deals.contract_start_date",
      "model.Column(frequency=1) = ?.deals_signed.contract_end_date",
      "model.Column(frequency=1) = ?.deals_signed.contract_start_date",
      "model.Column(frequency=1) = ?.deals_signed.deal_id",
      "model.Column(frequency=1) = ?.deals_signed.revenue_aux_day",
      "model.Column(frequency=1) = ?.deals_signed.revenue_core_day",
      "model.Column(frequency=1) = ?.deals_signed.revenue_day",
      "model.Column(frequency=1) = ?.t.deals",
      "model.Column(frequency=1) = ?.t.revenue",
      "model.Column(frequency=1) = ?.t.revenue_aux",
      "model.Column(frequency=1) = ?.t.revenue_core",
      "model.Column(frequency=2) = ?.?.date_month",
      "model.Column(frequency=2) = ?.?.revenue",
      "model.Column(frequency=2) = ?.accounts_revenue.account_id",
      "model.Column(frequency=2) = ?.date_ranges.date_day",
      "model.Column(frequency=2) = ?.orders.product",
      "model.Column(frequency=3) = ?.?.contract_duration_days",
      "model.Column(frequency=3) = ?.accounts.industry",
      "model.Column(frequency=3) = ?.orders.value",
      "model.Column(frequency=4) = ?.t.revenue_12m",
      "model.Column(frequency=6) = ?.countries.region",
      "model.Column(frequency=7) = ?.accounts_revenue.revenue" ],
    "expr_code_to_model": {
      "code.Expression(0-accounts.sql:103:8-107:9) = SUM(revenue) OVER (\n            PARTITION BY account_id \n            ORDER BY date_month \n            ROWS BETWEEN 11 PRECEDING AND CURRENT ROW\n        )": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.?.revenue), Analytics_clause(Over_clause(Window_specification(Window_partition_clause(Partition_expression(?.?.account_id)), Order_by_clause(Order_by_clause_body(?.?.date_month)), Window_frame_clause(Rows_range(), Window_frame_between(Between_from(11), Between_to(Keyword_current_row())))))))",
      "code.Expression(0-accounts.sql:27:4-27:36) = revenue / contract_duration_days": "model.Expression(frequency=1) = Binary_expression(?.?.revenue, ?.?.contract_duration_days)",
      "code.Expression(0-accounts.sql:28:4-28:41) = revenue_core / contract_duration_days": "model.Expression(frequency=1) = Binary_expression(?.?.revenue_core, ?.?.contract_duration_days)",
      "code.Expression(0-accounts.sql:29:4-29:40) = revenue_aux / contract_duration_days": "model.Expression(frequency=1) = Binary_expression(?.?.revenue_aux, ?.?.contract_duration_days)",
      "code.Expression(0-accounts.sql:36:8-36:77) = julianday(d.contract_end_date) - julianday(d.contract_start_date) + 1": "model.Expression(frequency=1) = Binary_expression(-(Julianday(?.deals.contract_end_date), Julianday(?.deals.contract_start_date)), 1)",
      "code.Expression(0-accounts.sql:37:8-37:105) = SUM(CASE WHEN o.product IN ('Subscription Base', 'Subscription Premium') THEN o.value ELSE 0 END)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Subscription Base', 'Subscription Premium')), ?.orders.value), Caseelse_clause(0))))",
      "code.Expression(0-accounts.sql:38:8-38:86) = SUM(CASE WHEN o.product IN ('Training', 'Consulting') THEN o.value ELSE 0 END)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Training', 'Consulting')), ?.orders.value), Caseelse_clause(0))))",
      "code.Expression(0-accounts.sql:39:8-39:20) = SUM(o.value)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.orders.value))",
      "code.Expression(0-accounts.sql:53:4-53:16) = AVG(t.deals)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.deals))",
      "code.Expression(0-accounts.sql:54:4-54:23) = SUM(t.revenue_core)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_core))",
      "code.Expression(0-accounts.sql:55:4-55:22) = SUM(t.revenue_aux)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_aux))",
      "code.Expression(0-accounts.sql:56:4-56:18) = SUM(t.revenue)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue))",
      "code.Expression(0-accounts.sql:60:8-60:40) = DATE(date_day, 'start of month')": "model.Expression(frequency=1) = Function_call(Identifier(), Argument(?.?.date_day), Argument('start of month'))",
      "code.Expression(0-accounts.sql:62:8-62:25) = COUNT(ds.deal_id)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.deal_id))",
      "code.Expression(0-accounts.sql:63:8-63:32) = SUM(ds.revenue_core_day)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_core_day))",
      "code.Expression(0-accounts.sql:64:8-64:31) = SUM(ds.revenue_aux_day)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_aux_day))",
      "code.Expression(0-accounts.sql:65:8-65:27) = SUM(ds.revenue_day)": "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_day))",
      "code.Expression(0-accounts.sql:68:16-69:57) = dr.date_day >= date(ds.contract_start_date)\n            AND dr.date_day <= date(ds.contract_end_date)": "model.Expression(frequency=1) = Binary_expression(>=(?.date_ranges.date_day, Date(?.deals_signed.contract_start_date)), <=(?.date_ranges.date_day, Date(?.deals_signed.contract_end_date)))",
      "code.Expression(0-accounts.sql:80:4-85:7) = CASE \n        WHEN t.revenue_12m <= 300 THEN 'Small'\n        WHEN t.revenue_12m > 300 AND t.revenue_12m <= 600 THEN 'Medium'\n        WHEN t.revenue_12m > 600 THEN 'Large'\n        ELSE NULL\n    END": "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(?.t.revenue_12m, 300), 'Small'), Casewhen_clause(And(>(?.t.revenue_12m, 300), <=(?.t.revenue_12m, 600)), 'Medium'), Casewhen_clause(>(?.t.revenue_12m, 600), 'Large'), Caseelse_clause(Null()))",
      "code.Expression(0-accounts.sql:97:8-101:11) = CASE\n            WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n            WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n            ELSE NULL\n        END": "model.Expression(frequency=3) = Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))",
      "code.Expression(1-revenue.sql:11:4-15:7) = CASE \n        WHEN a.industry = 'Information Technology' THEN 'Tech'\n        WHEN a.industry IS NULL THEN NULL\n        ELSE 'Other'\n    END": "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(=(?.accounts.industry, 'Information Technology'), 'Tech'), Casewhen_clause(Unary_expression(?.accounts.industry, Null()), Null()), Caseelse_clause('Other'))",
      "code.Expression(1-revenue.sql:17:4-17:19) = SUM(ar.revenue)": "model.Expression(frequency=2) = Function_call(Identifier, Argument(?.accounts_revenue.revenue))",
      "code.Expression(1-revenue.sql:18:4-18:33) = COUNT(DISTINCT ar.account_id)": "model.Expression(frequency=1) = Function_call(Identifier, Distinct(), Argument(?.accounts_revenue.account_id))",
      "code.Expression(1-revenue.sql:19:4-19:51) = SUM(ar.revenue) / COUNT(DISTINCT ar.account_id)": "model.Expression(frequency=1) = Binary_expression(Sum(?.accounts_revenue.revenue), Count(?.accounts_revenue.account_id))",
      "code.Expression(1-revenue.sql:32:4-36:7) = CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END": "model.Expression(frequency=3) = Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))",
      "code.Expression(1-revenue.sql:38:4-38:70) = IIF(accounts.industry = 'Information Technology', 'Tech', 'Other')": "model.Expression(frequency=1) = Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('Tech'), Argument('Other'))",
      "code.Expression(1-revenue.sql:39:4-44:7) = CASE \n        WHEN SUM(accounts_revenue.revenue) <= 300 THEN 'Small'\n        WHEN SUM(accounts_revenue.revenue) > 300 AND SUM(accounts_revenue.revenue) <= 600 THEN 'Medium'\n        WHEN SUM(accounts_revenue.revenue) > 600 THEN 'Large'\n        ELSE NULL\n    END": "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(Sum(?.accounts_revenue.revenue), 300), 'Small'), Casewhen_clause(And(>(Sum(?.accounts_revenue.revenue), 300), <=(Sum(?.accounts_revenue.revenue), 600)), 'Medium'), Casewhen_clause(>(Sum(?.accounts_revenue.revenue), 600), 'Large'), Caseelse_clause(Null()))",
      "code.Expression(1-revenue.sql:45:4-45:33) = SUM(accounts_revenue.revenue)": "model.Expression(frequency=2) = Function_call(Identifier, Argument(?.accounts_revenue.revenue))",
      "code.Expression(1-revenue.sql:5:4-5:37) = date(date_month, 'start of year')": "model.Expression(frequency=1) = Function_call(Identifier(), Argument(?.?.date_month), Argument('start of year'))",
      "code.Expression(1-revenue.sql:6:4-10:7) = CASE\n        WHEN c.region IN ('Americas', 'Europe') THEN 'North-West'\n        WHEN c.region IN ('Africa', 'Asia') THEN 'South-East'\n        ELSE NULL\n    END": "model.Expression(frequency=3) = Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))" },
    "expressions": [
      "model.Expression(frequency=1) = Binary_expression(-(Julianday(?.deals.contract_end_date), Julianday(?.deals.contract_start_date)), 1)",
      "model.Expression(frequency=1) = Binary_expression(>=(?.date_ranges.date_day, Date(?.deals_signed.contract_start_date)), <=(?.date_ranges.date_day, Date(?.deals_signed.contract_end_date)))",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue_aux, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue_core, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Binary_expression(Sum(?.accounts_revenue.revenue), Count(?.accounts_revenue.account_id))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(?.t.revenue_12m, 300), 'Small'), Casewhen_clause(And(>(?.t.revenue_12m, 300), <=(?.t.revenue_12m, 600)), 'Medium'), Casewhen_clause(>(?.t.revenue_12m, 600), 'Large'), Caseelse_clause(Null()))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(Sum(?.accounts_revenue.revenue), 300), 'Small'), Casewhen_clause(And(>(Sum(?.accounts_revenue.revenue), 300), <=(Sum(?.accounts_revenue.revenue), 600)), 'Medium'), Casewhen_clause(>(Sum(?.accounts_revenue.revenue), 600), 'Large'), Caseelse_clause(Null()))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(=(?.accounts.industry, 'Information Technology'), 'Tech'), Casewhen_clause(Unary_expression(?.accounts.industry, Null()), Null()), Caseelse_clause('Other'))",
      "model.Expression(frequency=1) = Function_call(Identifier(), Argument(?.?.date_day), Argument('start of month'))",
      "model.Expression(frequency=1) = Function_call(Identifier(), Argument(?.?.date_month), Argument('start of year'))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('Tech'), Argument('Other'))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.?.revenue), Analytics_clause(Over_clause(Window_specification(Window_partition_clause(Partition_expression(?.?.account_id)), Order_by_clause(Order_by_clause_body(?.?.date_month)), Window_frame_clause(Rows_range(), Window_frame_between(Between_from(11), Between_to(Keyword_current_row())))))))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.deal_id))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_aux_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_core_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.orders.value))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.deals))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_aux))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_core))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Subscription Base', 'Subscription Premium')), ?.orders.value), Caseelse_clause(0))))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Training', 'Consulting')), ?.orders.value), Caseelse_clause(0))))",
      "model.Expression(frequency=1) = Function_call(Identifier, Distinct(), Argument(?.accounts_revenue.account_id))",
      "model.Expression(frequency=2) = Function_call(Identifier, Argument(?.accounts_revenue.revenue))",
      "model.Expression(frequency=3) = Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))" ],
    "tables": [
      "model.Table(frequency=1) = ?.accounts_360",
      "model.Table(frequency=1) = ?.date_ranges",
      "model.Table(frequency=1) = ?.deals",
      "model.Table(frequency=1) = ?.deals_signed",
      "model.Table(frequency=1) = ?.orders",
      "model.Table(frequency=3) = ?.accounts",
      "model.Table(frequency=3) = ?.accounts_revenue",
      "model.Table(frequency=3) = ?.countries" ] } }