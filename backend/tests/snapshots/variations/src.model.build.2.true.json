{
  "model.Semantics(columns=27, tables=8, expressions=29)": {
    "columns": [
      "model.Column(frequency=1) = ?.?.account_id",
      "model.Column(frequency=1) = ?.?.date_day",
      "model.Column(frequency=1) = ?.?.revenue_aux",
      "model.Column(frequency=1) = ?.?.revenue_core",
      "model.Column(frequency=1) = ?.deals.contract_end_date",
      "model.Column(frequency=1) = ?.deals.contract_start_date",
      "model.Column(frequency=1) = ?.deals_signed.contract_end_date",
      "model.Column(frequency=1) = ?.deals_signed.contract_start_date",
      "model.Column(frequency=1) = ?.deals_signed.deal_id",
      "model.Column(frequency=1) = ?.deals_signed.revenue_aux_day",
      "model.Column(frequency=1) = ?.deals_signed.revenue_core_day",
      "model.Column(frequency=1) = ?.deals_signed.revenue_day",
      "model.Column(frequency=1) = ?.t.deals",
      "model.Column(frequency=1) = ?.t.revenue",
      "model.Column(frequency=1) = ?.t.revenue_aux",
      "model.Column(frequency=1) = ?.t.revenue_core",
      "model.Column(frequency=2) = ?.?.revenue",
      "model.Column(frequency=2) = ?.date_ranges.date_day",
      "model.Column(frequency=2) = ?.orders.product",
      "model.Column(frequency=3) = ?.?.contract_duration_days",
      "model.Column(frequency=3) = ?.?.date_month",
      "model.Column(frequency=3) = ?.orders.value",
      "model.Column(frequency=4) = ?.accounts.industry",
      "model.Column(frequency=4) = ?.accounts_revenue.account_id",
      "model.Column(frequency=4) = ?.t.revenue_12m",
      "model.Column(frequency=9) = ?.accounts_revenue.revenue",
      "model.Column(frequency=9) = ?.countries.region" ],
    "expressions": [
      "model.Expression(frequency=1) = Binary_expression(-(Julianday(?.deals.contract_end_date), Julianday(?.deals.contract_start_date)), 1)",
      "model.Expression(frequency=1) = Binary_expression(>=(?.date_ranges.date_day, Date(?.deals_signed.contract_start_date)), <=(?.date_ranges.date_day, Date(?.deals_signed.contract_end_date)))",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue_aux, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Binary_expression(?.?.revenue_core, ?.?.contract_duration_days)",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(?.t.revenue_12m, 300), 'Small'), Casewhen_clause(And(>(?.t.revenue_12m, 300), <=(?.t.revenue_12m, 600)), 'Medium'), Casewhen_clause(>(?.t.revenue_12m, 600), 'Large'), Caseelse_clause(Null()))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(<=(Sum(?.accounts_revenue.revenue), 300), 'Small'), Casewhen_clause(And(>(Sum(?.accounts_revenue.revenue), 300), <=(Sum(?.accounts_revenue.revenue), 600)), 'Medium'), Casewhen_clause(>(Sum(?.accounts_revenue.revenue), 600), 'Large'), Caseelse_clause(Null()))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(=(?.accounts.industry, 'Information Technology'), 'Tech'), Casewhen_clause(Unary_expression(?.accounts.industry, Null()), Null()), Caseelse_clause('Other'))",
      "model.Expression(frequency=1) = Casewhen_expression(Casewhen_clause(In(?.countries.region, 'Americas'), 'AMER'), Casewhen_clause(In(?.countries.region, Struct('Europe', 'Africa')), 'EMEA'), Casewhen_clause(=(?.countries.region, 'Asia'), 'APAC'), Caseelse_clause(Null()))",
      "model.Expression(frequency=1) = Function_call(Identifier(), Argument(?.?.date_day), Argument('start of month'))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('IT'), Argument('Non-IT'))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(=(?.accounts.industry, 'Information Technology')), Argument('Tech'), Argument('Other'))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.?.revenue), Analytics_clause(Over_clause(Window_specification(Window_partition_clause(Partition_expression(?.?.account_id)), Order_by_clause(Order_by_clause_body(?.?.date_month)), Window_frame_clause(Rows_range(), Window_frame_between(Between_from(11), Between_to(Keyword_current_row())))))))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.deal_id))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_aux_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_core_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.deals_signed.revenue_day))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.orders.value))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.deals))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_aux))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(?.t.revenue_core))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Subscription Base', 'Subscription Premium')), ?.orders.value), Caseelse_clause(0))))",
      "model.Expression(frequency=1) = Function_call(Identifier, Argument(Casewhen_expression(Casewhen_clause(In(?.orders.product, Struct('Training', 'Consulting')), ?.orders.value), Caseelse_clause(0))))",
      "model.Expression(frequency=2) = Binary_expression(Sum(?.accounts_revenue.revenue), Count(?.accounts_revenue.account_id))",
      "model.Expression(frequency=2) = Function_call(Identifier(), Argument(?.?.date_month), Argument('start of year'))",
      "model.Expression(frequency=2) = Function_call(Identifier, Distinct(), Argument(?.accounts_revenue.account_id))",
      "model.Expression(frequency=3) = Casewhen_expression(Casewhen_clause(In(?.countries.region, Struct('Americas', 'Europe')), 'North-West'), Casewhen_clause(In(?.countries.region, Struct('Africa', 'Asia')), 'South-East'), Caseelse_clause(Null()))",
      "model.Expression(frequency=3) = Function_call(Identifier, Argument(?.accounts_revenue.revenue))" ],
    "tables": [
      "model.Table(frequency=1) = ?.accounts_360",
      "model.Table(frequency=1) = ?.date_ranges",
      "model.Table(frequency=1) = ?.deals",
      "model.Table(frequency=1) = ?.deals_signed",
      "model.Table(frequency=1) = ?.orders",
      "model.Table(frequency=4) = ?.accounts",
      "model.Table(frequency=4) = ?.accounts_revenue",
      "model.Table(frequency=4) = ?.countries" ] } }